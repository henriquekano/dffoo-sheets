{"version":3,"sources":["icons.js","data/characterList.js","data/summonBoards.js","thirdPartyReaders/dffoodb.js","components/EventsTimeline/index.js","App.js","serviceWorker.js","index.js"],"names":["tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","list","createDffoodbParser","realm","_realmToAccronym","realmAccronym","_filterByRealm","R","event","title","_sortByEndDate","_expandLostChapters","lcStartDate","lcDates","dates","moment","format","add","_expandEventsWithNoEndDate","startDate","getEvents","events","scrappedEvents","raids","sBoards","story","realmFilter","sorter","organizeEventsInLanes","hasDateClash","lanedEvents","comparedEvent","reduce","acc","extractDates","extractDatesByRealm","eventDates","comparedDates","comparedStartIsBetween","isBetween","comparedEndIsBetween","eventsHaveTheExactSameTimeSpan","length","laneIndex","lane","chechDateClashes","calculateEventsInPercentage","toTimeStamp","date","limits","Infinity","data","getRandomColor","goodColors","colorIndex","color","randomColorGenerator","toTimestamp","parseInt","DateIndicator","style","Box","display","flexDirection","height","alignItems","Typography","borderRight","width","DateOverlay","forceUpdate","useState","set","value","useForceUpdate","useEffect","interval","setInterval","clearInterval","dateStartString","dateEndString","dateStart","dateEnd","daysDifference","diff","daysInterval","divisor","timeSeparators","isBefore","formattedDate","leftSpacing","key","position","left","top","subtract","formatCharacterName","Lane","onClickEvent","bars","eventTitle","gl","eventStartDateString","eventEndDateString","eventStartDate","eventEndDate","barWidth","eventDateStart","eventDateEnd","dateTooltip","charactersTooltips","chara","Tooltip","map","tooltip","placement","Button","variant","backgroundColor","next","minHeight","padding","onClick","marginTop","marginBottom","EventsTimeline","lanes","overflowX","paddingTop","overflowY","JSON","stringify","dffoodb","log","SummonBoardLevel","fieldName","fieldValue","calculatedTreasureLevel","level","calculatedMasterLevel","isTreasured","isMastered","this","buildCharacterObject","index","character_name","summonBoardsProvided","mergedSummonBoardInfo","summonBoards","summon","toLowerCase","providedLevel","App","getFormatterEvents","formatToCalendar","applySpec","pathOr","start","path","end","resource","getEntries","parse","localStorage","getItem","err","setEntries","entries","setItem","addEntryToStorage","entry","callback","newEntries","state","savedEntry","setState","updateEntry","addByCharacterFilter","prevState","filters","byCharacter","removeByCharacterFilter","filter","filterEntries","includes","handleEventClick","console","handleLevelClick","entryId","sbCalculator","newFieldValue","render","summonBoardColumns","summonName","field","type","cellStyle","fontSize","Card","CardContent","component","flex","flexGrow","FormGroup","row","maxHeight","overflow","sortBy","prop","FormControlLabel","maxWidth","minWidth","control","Checkbox","onChange","checked","label","icons","actions","icon","MonetizationOn","rowData","ifrit_sb_level","shiva_sb_level","ramuh_sb_level","EmojiEvents","editable","onRowUpdate","newData","Promise","resolve","reject","columns","components","Cell","columnDef","cellValue","boardStatusColor","border","justifyContent","options","paging","pageSize","paginationType","headerStyle","fontWeight","actionsCellStyle","rowStyle","characterList","characterName","Object","keys","entryKeys","newKeys","differenceSet","difference","newEntry","forEach","newSummonKey","existingDataOnCharacter","propEq","PureComponent","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ux9BAqCeA,GApBI,CACjBC,IAAKC,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,IAAD,iBAAYD,EAAZ,CAAmBC,IAAKA,QACxDC,MAAOH,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,IAAD,iBAAWD,EAAX,CAAkBC,IAAKA,QACzDE,MAAOJ,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,IAAD,iBAAWD,EAAX,CAAkBC,IAAKA,QACzDG,OAAQL,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,IAAD,iBAAmBD,EAAnB,CAA0BC,IAAKA,QAClEI,YAAaN,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,IAAD,iBAAkBD,EAAlB,CAAyBC,IAAKA,QACtEK,KAAMP,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,IAAD,iBAAUD,EAAV,CAAiBC,IAAKA,QACvDM,OAAQR,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,KAAD,iBAAaD,EAAb,CAAoBC,IAAKA,QAC5DO,OAAQT,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,IAAD,iBAAgBD,EAAhB,CAAuBC,IAAKA,QAC/DQ,UAAWV,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,KAAD,iBAAeD,EAAf,CAAsBC,IAAKA,QACjES,SAAUX,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,KAAD,iBAAcD,EAAd,CAAqBC,IAAKA,QAC/DU,SAAUZ,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,IAAD,iBAAkBD,EAAlB,CAAyBC,IAAKA,QACnEW,aAAcb,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,IAAD,iBAAiBD,EAAjB,CAAwBC,IAAKA,QACtEY,YAAad,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,IAAD,iBAAWD,EAAX,CAAkBC,IAAKA,QAC/Da,OAAQf,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,KAAD,iBAAYD,EAAZ,CAAmBC,IAAKA,QAC3Dc,UAAWhB,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,IAAD,iBAAiBD,EAAjB,CAAwBC,IAAKA,QACnEe,gBAAiBjB,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,KAAD,iBAAYD,EAAZ,CAAmBC,IAAKA,QACpEgB,WAAYlB,sBAAW,SAACC,EAAOC,GAAR,OAAgB,kBAAC,KAAD,iBAAgBD,EAAhB,CAAuBC,IAAKA,SCwEtDiB,GA1GF,CACX,mBACA,OACA,MACA,OACA,OACA,QACA,OACA,WACA,SACA,aACA,MACA,OACA,SACA,OACA,OACA,OACA,QACA,SACA,QACA,OACA,eACA,SACA,SACA,UACA,SACA,SACA,UACA,SACA,QACA,QACA,YACA,WACA,OACA,QACA,QACA,OACA,UACA,SACA,QACA,QACA,MACA,UACA,QACA,QACA,OACA,WACA,YACA,WACA,OACA,QACA,OACA,SACA,OACA,QACA,SACA,QACA,QACA,SACA,QACA,OACA,OACA,QACA,QACA,UACA,SACA,QACA,SACA,YACA,QACA,MACA,QACA,QACA,OACA,YACA,OACA,QACA,SACA,UACA,UACA,YACA,OACA,YACA,UACA,OACA,OACA,QACA,QACA,SACA,QACA,SACA,gBACA,OACA,SACA,QACA,OACA,eACA,QACA,QACA,OACA,QACA,QACA,SACA,WCvGa,IACb,QACA,QACA,S,8rBCCF,IA8KeC,GA9Ka,SAACC,GAC3B,IAAMC,EAAmB,SAAAD,GAAK,MAClB,WAAVA,EAAqB,KAAO,MAExBE,EAAgBD,EAAiBD,GAEjCG,EAAiBC,MAAS,SAAAC,GAAK,OACnCA,EAAMC,MAAML,EAAiBD,OAGzBO,EAAiBH,IACrBA,IAAO,CAAC,QAASH,EAAiBD,GAAQ,KAKtCQ,EAAsBJ,KAC1BA,KAAM,SAACC,GACL,IAAMI,EAAcJ,EAAMK,QAAQR,GAClC,OAAKO,EAiBE,CACLJ,EAdW,MACRA,EADQ,CAEXC,MAAM,eACHJ,EADE,UACiBG,EAAMC,MAAMJ,GAD7B,QAGLS,MAAM,eACHT,EAAgB,CACfU,KAAOH,GAAaI,SACpBD,KAAOH,GAAaK,IAAI,EAAG,SAASD,cAXjCR,KAqBXD,MAIIW,EAA6BX,KACjCA,KAAM,SAACC,GACL,IAAMW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","file":"static/js/main.d74b6c51.chunk.js","sourcesContent":["import React, { forwardRef } from 'react'\nimport AddBox from '@material-ui/icons/AddBox'\nimport ArrowUpward from '@material-ui/icons/ArrowUpward'\nimport Check from '@material-ui/icons/Check'\nimport ChevronLeft from '@material-ui/icons/ChevronLeft'\nimport ChevronRight from '@material-ui/icons/ChevronRight'\nimport Clear from '@material-ui/icons/Clear'\nimport DeleteOutline from '@material-ui/icons/DeleteOutline'\nimport Edit from '@material-ui/icons/Edit'\nimport FilterList from '@material-ui/icons/FilterList'\nimport FirstPage from '@material-ui/icons/FirstPage'\nimport LastPage from '@material-ui/icons/LastPage'\nimport Remove from '@material-ui/icons/Remove'\nimport SaveAlt from '@material-ui/icons/SaveAlt'\nimport Search from '@material-ui/icons/Search'\nimport ViewColumn from '@material-ui/icons/ViewColumn'\n\nconst tableIcons = {\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n  DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n  PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n}\n\nexport default tableIcons\n","const list = [\n  'Warrior of Light',\n  'Vivi',\n  'Rem',\n  'Sazh',\n  'Tifa',\n  'Cloud',\n  'Hope',\n  'Y\\'shtola',\n  'Zidane',\n  'Dark Cecil',\n  'Yda',\n  'Vaan',\n  'Yuffie',\n  'Yuna',\n  'Edge',\n  'King',\n  'Bartz',\n  'Penelo',\n  'Terra',\n  'Yang',\n  'Onion Knight',\n  'Firion',\n  'Laguna',\n  'Steiner',\n  'Shadow',\n  'Squall',\n  'Vanille',\n  'Setzer',\n  'Wakka',\n  'Galuf',\n  'Shantotto',\n  'Balthier',\n  'Eiko',\n  'Tidus',\n  'Layle',\n  'Zell',\n  'Vincent',\n  'Prishe',\n  'Faris',\n  'Ramza',\n  'Ace',\n  'Seymour',\n  'Sabin',\n  'Krile',\n  'Cyan',\n  'Papalymo',\n  'Lightning',\n  'Thancred',\n  'Snow',\n  'Cater',\n  'Ashe',\n  'Aerith',\n  'Lion',\n  'Auron',\n  'Irvine',\n  'Serah',\n  'Edgar',\n  'Garnet',\n  'Celes',\n  'Kain',\n  'Kuja',\n  'Palom',\n  'Maria',\n  'Quistis',\n  'Raijin',\n  'Fujin',\n  'Seifer',\n  'Sephiroth',\n  'Lenna',\n  'Cid',\n  'Rydia',\n  'Kefka',\n  'Zack',\n  'Lilisette',\n  'Yuri',\n  'Jecht',\n  'Noctis',\n  'Alisaie',\n  'Selphie',\n  'Gilgamesh',\n  'Relm',\n  'Cait Sith',\n  'Beatrix',\n  'Leon',\n  'Fang',\n  'Seven',\n  'Deuce',\n  'Agrias',\n  'Locke',\n  'Barret',\n  'Paladin Cecil',\n  'Rosa',\n  'Golbez',\n  'Rinoa',\n  'Lulu',\n  'Lann & Reynn',\n  'Freya',\n  'Vayne',\n  'Fran',\n  'Porom',\n  'Paine',\n  'Cinque',\n  'Prompto'\n]\n\nexport default list\n","export default [\n  'Shiva',\n  'Ifrit',\n  'Ramuh',\n]\n","import scrappedEvents from '../data/scrappedPastEvents.json'\nimport * as R from 'ramda'\nimport moment from 'moment'\n\nconst createDffoodbParser = (realm) => {\n  const _realmToAccronym = realm =>\n    realm === 'global' ? 'gl' : 'jp'\n\n  const realmAccronym = _realmToAccronym(realm)\n\n  const _filterByRealm = R.filter(event =>\n    event.title[_realmToAccronym(realm)]\n  )\n\n  const _sortByEndDate = R.sortBy(\n    R.path(['dates', _realmToAccronym(realm), 1])\n  )\n\n  // The scrapped events don't include end date\n  // for the LC synergy end\n  const _expandLostChapters = R.pipe(\n    R.map((event) => {\n      const lcStartDate = event.lcDates[realmAccronym]\n      if (!lcStartDate) {\n        return event\n      }\n\n      const lcEvent = {\n        ...event,\n        title: {\n          [realmAccronym]: `${event.title[realmAccronym]} LC`,\n        },\n        dates: {\n          [realmAccronym]: [\n            moment(lcStartDate).format(),\n            moment(lcStartDate).add(2, 'weeks').format(),\n          ],\n        },\n      }\n\n      return [\n        event,\n        lcEvent,\n      ]\n    }),\n    R.flatten,\n  )\n\n  // sboard and story, for now\n  const _expandEventsWithNoEndDate = R.pipe(\n    R.map((event) => {\n      const startDate = event.dates[realmAccronym]\n      if (!startDate) {\n        return event\n      }\n\n      const expandedEvent = {\n        ...event,\n        dates: {\n          [realmAccronym]: [\n            moment(startDate).format(),\n            moment(startDate).add(2, 'weeks').format(),\n          ],\n        },\n      }\n\n      return expandedEvent\n    }),\n    R.flatten,\n  )\n\n  const getEvents = () => {\n    const {\n      events,\n      raids,\n      sBoards,\n      story,\n    } = scrappedEvents\n\n    const realmFilter = _filterByRealm()\n    const sorter = _sortByEndDate()\n    return R.pipe(\n      realmFilter,\n      sorter,\n      R.reverse,\n    )([\n      ..._expandLostChapters(events),\n      ..._expandEventsWithNoEndDate(story),\n      ..._expandEventsWithNoEndDate(sBoards),\n      ...raids,\n    ])\n  }\n\n  const organizeEventsInLanes = (events) => {\n    const extractDatesByRealm = realm => R.path(['dates', realm])\n    const hasDateClash = lanedEvents => comparedEvent => lanedEvents\n      .reduce((acc, event) => {\n        const extractDates = extractDatesByRealm(_realmToAccronym(realm))\n        const eventDates = extractDates(event)\n        const comparedDates = extractDates(comparedEvent)\n\n        const comparedStartIsBetween = moment(comparedDates[0]).isBetween(eventDates[0], eventDates[1], 'second')\n        const comparedEndIsBetween = moment(comparedDates[1]).isBetween(eventDates[0], eventDates[1], 'second')\n        const eventsHaveTheExactSameTimeSpan = eventDates[0] === comparedDates[0] && eventDates[1] === comparedDates[1]\n        // if (comparedStartIsBetween || comparedEndIsBetween) {\n        //   console.log('clash!', comparedDates, eventDates)\n        // }\n        return acc || comparedStartIsBetween || comparedEndIsBetween || eventsHaveTheExactSameTimeSpan\n      }, false)\n\n    const lanedEvents = events.reduce((acc, event) => {\n      if (acc.length === 0) {\n        return [\n          [event]\n        ]\n      }\n\n      // let's find a lane with no date clash\n      let laneIndex = 0\n      let lane = acc[laneIndex]\n      do {\n        const chechDateClashes = hasDateClash(lane)\n        if (!chechDateClashes(event)) {\n          return R.set(R.lensIndex(laneIndex), [...lane, event], acc)\n        }\n        laneIndex += 1\n        lane = acc[laneIndex]\n      } while(lane)\n\n      // didn't found a free space in the existing lanes\n      return [\n        ...acc,\n        [event],\n      ]\n    }, [])\n\n    return lanedEvents\n  }\n\n  const calculateEventsInPercentage = (lanedEvents) => {\n    const toTimeStamp = date => moment(date).format('X')\n    const minMaxTimestamp = R.pipe(\n      R.flatten,\n      R.juxt([\n        R.pipe(\n          R.reduce(\n            R.minBy((event) =>\n              toTimeStamp(event.dates[_realmToAccronym(realm)][0])\n            ),\n            { dates: { [_realmToAccronym(realm)]: [Infinity] } },\n          ),\n          R.path(['dates', _realmToAccronym(realm), 0]),\n        ),\n        R.pipe(\n          R.reduce(\n            R.maxBy((event) =>\n              toTimeStamp(event.dates[_realmToAccronym(realm)][1])\n            ),\n            { dates: { [_realmToAccronym(realm)]: [Infinity] } },\n          ),\n          R.path(['dates', _realmToAccronym(realm), 1]),\n        )\n      ]),\n    )(lanedEvents)\n\n    return {\n      limits: minMaxTimestamp,\n      data: lanedEvents,\n    }\n  }\n\n  return {\n    getEvents,\n    organizeEventsInLanes,\n    calculateEventsInPercentage,\n  }\n}\n\nexport default createDffoodbParser\n","import React, { useEffect, useState } from 'react'\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport Button from '@material-ui/core/Button'\nimport moment from 'moment'\nimport * as R from 'ramda'\n\nfunction useForceUpdate(){\n  const [, set] = useState(true); //boolean state\n  return () => set(value => !value); // toggle the state to force render\n}\n\n\nfunction* getRandomColor() {\n  const goodColors = [\n    'rgb(222, 192, 41)',\n    'rgb(161, 207, 243)',\n    'rgb(140, 214, 2)',\n    'rgb(247, 26, 156)',\n    'rgb(33, 208, 138)',\n  ]\n\n  let colorIndex = 0\n  while (true) {\n    const color = goodColors[colorIndex]\n    yield color\n    colorIndex = (colorIndex + 1) % goodColors.length\n  }\n}\nconst randomColorGenerator = getRandomColor()\n\nconst toTimestamp = date =>\n  parseInt(date.format('X'))\n\nconst DateIndicator = ({ date, style, color }) => (\n  <Box\n    display=\"flex\"\n    style={{\n      flexDirection: 'column',\n      height: '100%',\n      alignItems: 'flex-start',\n      ...style,\n    }}\n  >\n    <Box style={{ height: 20 }}>\n      <Typography style={{ color: color || 'black' }}>\n        { date }\n      </Typography>\n    </Box>\n    <Box style={{ borderRight: `1px solid ${color || 'black'}`, height: '100%', width: 0 }} />\n  </Box>\n)\n\nconst DateOverlay = ({\n  limits,\n  width,\n}) => {\n  const forceUpdate = useForceUpdate()\n  useEffect(() => {\n    const interval = setInterval(() => {\n      forceUpdate()\n    }, 1000000)\n\n    return () => clearInterval(interval)\n  })\n  const [dateStartString, dateEndString] = limits\n  const dateStart = moment(dateStartString)\n  const dateEnd = moment(dateEndString)\n\n  const daysDifference = dateEnd.diff(dateStart, 'days')\n  let daysInterval = daysDifference\n  let divisor = 2\n  while (daysInterval > 7) {\n    daysInterval = daysDifference / divisor\n    divisor += 1\n  }\n\n  let timeSeparators = []\n  let date = moment(dateEnd)\n  while (!date.isBefore(dateStart)) {\n    const formattedDate = date.format('YY/MMM/DD')\n    const leftSpacing = (toTimestamp(dateEnd) - toTimestamp(date)) * width / (toTimestamp(dateEnd) - toTimestamp(dateStart))\n    timeSeparators = [\n      ...timeSeparators,\n      <DateIndicator\n        key={formattedDate}\n        date={formattedDate}\n        style={{\n          position: 'absolute',\n          left: leftSpacing,\n          top: 0,\n        }}\n      />,\n    ]\n    date = date.subtract(daysInterval, 'days')\n  }\n\n  const formattedDate = moment().format('YY/MMM/DD')\n  const leftSpacing = (toTimestamp(dateEnd) - toTimestamp(moment())) * width\n    / (toTimestamp(dateEnd) - toTimestamp(dateStart))\n  timeSeparators = [\n    ...timeSeparators,\n    <DateIndicator\n      key={formattedDate}\n      color=\"red\"\n      style={{\n        position: 'absolute',\n        left: leftSpacing,\n        top: 0,\n      }}\n    />,\n  ]\n\n  return timeSeparators\n}\n\nconst formatCharacterName = R.pipe(\n  R.split('_'),\n  R.map(\n    R.pipe(\n      R.juxt([\n        R.head,\n        R.tail,\n      ]),\n      R.over(R.lensIndex(0), R.toUpper),\n      R.join(''),\n    )\n  ),\n  R.join(' '),\n)\n\n\nconst Lane = ({ onClickEvent, lane, limits, width }) => {\n  const [dateStartString, dateEndString] = limits\n\n  const dateStart = moment(dateStartString)\n  const dateEnd = moment(dateEndString)\n\n  let bars = []\n  for (let event of lane) {\n    const eventTitle = event.title.gl\n    const [eventStartDateString, eventEndDateString] = event.dates.gl\n    const eventStartDate = moment(eventStartDateString)\n    const eventEndDate = moment(eventEndDateString)\n\n    const barWidth = (toTimestamp(eventEndDate) - toTimestamp(eventStartDate)) * width\n      / (toTimestamp(dateEnd) - toTimestamp(dateStart))\n    const leftSpacing = (toTimestamp(dateEnd) - toTimestamp(eventEndDate)) * width\n      / (toTimestamp(dateEnd) - toTimestamp(dateStart))\n\n    const [eventDateStart, eventDateEnd] = event.dates.gl\n    const dateTooltip = moment(eventDateStart).format('YY/MMM/DD HH:mm')\n      + ' ~ ' + moment(eventDateEnd).format('YY/MMM/DD HH:mm')\n    const charactersTooltips = R.pipe(\n      R.map(formatCharacterName),\n    )(event.chara)\n\n    bars = [\n      ...bars,\n      <Tooltip\n        key={eventTitle}\n        title={\n          <>\n            {\n              <Typography>\n                { dateTooltip }\n              </Typography>\n            }\n            {\n              charactersTooltips.map(tooltip => (\n                <Typography key={tooltip}>\n                  { tooltip }\n                </Typography>\n              ))\n            }\n          </>\n        }\n        placement=\"bottom\"\n      >\n        <Button\n          variant=\"contained\"\n          key={eventTitle}\n          style={{\n            position: 'absolute',\n            backgroundColor: randomColorGenerator.next().value,\n            minHeight: 30,\n            width: barWidth,\n            left: leftSpacing,\n            top: 0,\n            padding: 0,\n          }}\n          onClick={() => onClickEvent(event)}\n        >\n          { eventTitle }\n        </Button>\n      </Tooltip>\n    ]\n  }\n\n  return (\n    <Box style={{ position: 'relative', minHeight: 60, marginTop: 20, marginBottom: 10 }}>\n      { bars }\n    </Box>\n  )\n}\n\nconst EventsTimeline = ({\n  limits,\n  lanes,\n  onClickEvent,\n}) => {\n  return (\n    <Box\n      display=\"flex\"\n      style={{ overflowX: 'auto', position: 'relative' }}\n    >\n      <DateOverlay width={10000} limits={limits}/>\n      <Box display=\"flex\" style={{ flexDirection: 'column', paddingTop: 20, overflowY: 'clip' }}>\n        {\n          lanes.map(lane => (\n            <Lane\n              key={JSON.stringify(lane[0])}\n              lane={lane}\n              width={10000}\n              limits={limits}\n              onClickEvent={onClickEvent}\n            />\n          ))\n        }\n      </Box>\n    </Box>\n  )\n}\n\nexport default EventsTimeline\n","import React, { PureComponent } from 'react'\nimport Box from '@material-ui/core/Box'\nimport Card from '@material-ui/core/Card'\nimport Button from '@material-ui/core/Button'\nimport CardContent from '@material-ui/core/CardContent'\nimport MaterialTable from \"material-table\"\nimport 'react-big-calendar/lib/css/react-big-calendar.css'\nimport EmojiEvents from '@material-ui/icons/EmojiEvents'\nimport MonetizationOn from '@material-ui/icons/MonetizationOn'\nimport Typography from '@material-ui/core/Typography'\nimport FormGroup from '@material-ui/core/FormGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport {\n  sortBy,\n  prop,\n  propEq,\n  difference,\n  pathOr,\n  path,\n  applySpec,\n  map,\n} from 'ramda'\nimport tableIcons from './icons'\nimport characterList from './data/characterList'\nimport summonBoards from './data/summonBoards'\nimport createDffoodbParser from './thirdPartyReaders/dffoodb'\nimport { EventsTimeline } from './components'\n\nconst dffoodb = createDffoodbParser('global')\n\nconst IS_DEV = !process.env.NODE_ENV || process.env.NODE_ENV === 'development'\nconst log = (...stuff) => {\n  if (IS_DEV) {\n    console.log(stuff)\n  }\n}\nclass SummonBoardLevel {\n  constructor (fieldName, fieldValue) {\n    this.level = { fieldName, fieldValue }\n  }\n\n  calculatedTreasureLevel = () =>\n    this.level.fieldName === 'ifrit_sb_level'\n      ? 20\n      : 21\n\n  calculatedMasterLevel = () => 56\n\n  isTreasured = () => {\n    if (this.level.fieldName === 'ifrit_sb_level') {\n      return this.level.fieldValue >= 20\n    }\n\n    return this.level.fieldValue >= 21\n  }\n\n  isMastered = () =>\n    this.level.fieldValue === 56\n}\n\nconst buildCharacterObject = ({\n  index,\n  character_name,\n  ...summonBoardsProvided,\n}) => {\n  const mergedSummonBoardInfo = summonBoards.reduce((acc, summon) => {\n    const key = `${summon.toLowerCase()}_sb_level`\n    const providedLevel = summonBoardsProvided[key]\n    if (providedLevel) {\n      return { ...acc, [key]: providedLevel }\n    }\n\n    return { ...acc, [key]: 0 }\n  }, {})\n  return {\n    index,\n    character_name,\n    ...mergedSummonBoardInfo,\n  }\n}\n\nclass App extends PureComponent {\n  constructor (props) {\n    super(props)\n    let entries = this.getEntries()\n    const firstAccess = !entries\n    if (firstAccess) {\n      entries = characterList.map((characterName, index) =>\n        buildCharacterObject({\n          character_name: characterName,\n          index,\n        })\n      )\n      this.setEntries(entries)\n    }\n\n    const addedSummon = Object.keys(entries[0]).length <\n      Object.keys(\n        buildCharacterObject({ character_name: '', index: 0 })\n      ).length\n    if (addedSummon) {\n      entries = entries.map((entry) => {\n        const entryKeys = Object.keys(entry)\n        const newKeys = Object.keys(\n          buildCharacterObject({ character_name: '', index: 0 })\n        )\n        const differenceSet = difference(newKeys, entryKeys)\n\n        const newEntry = { ...entry }\n        differenceSet.forEach(newSummonKey => {\n          newEntry[newSummonKey] = 0\n        })\n\n        return newEntry\n      })\n    }\n\n    const addedNewCharacters = entries.length !== characterList.length\n    if (addedNewCharacters) {\n      entries = characterList.map((characterName, index) => {\n        const existingDataOnCharacter = entries.filter(propEq('character_name', characterName))\n        if (existingDataOnCharacter) {\n          return existingDataOnCharacter\n        }\n\n        return ({\n          index,\n          character_name: characterName,\n          ifrit_sb_level: 0,\n          shiva_sb_level: 0,\n        })\n      })\n      this.setEntries(entries)\n    }\n\n    this.state = {\n      entries,\n      filters: {\n        byCharacter: [],\n      },\n    }\n  }\n\n  getFormatterEvents = () => {\n    const formatToCalendar = applySpec({\n      title: pathOr('ERROR', ['title', 'gl']),\n      start: path(['dates', 'gl', 0]),\n      end: path(['dates', 'gl', 1]),\n      resource: path(['chara']),\n    })\n\n    return map(formatToCalendar)(dffoodb.getEvents())\n  }\n\n  getEntries = () => {\n    try {\n      return JSON.parse(localStorage.getItem('entries'))\n    } catch (err) {\n      return null\n    }\n  }\n\n  setEntries = entries => {\n    localStorage.setItem('entries', JSON.stringify(entries))\n  }\n\n  addEntryToStorage = (entry, callback) => {\n    const {\n      entries\n    } = this.state\n    const newEntries = entries.map((savedEntry) => {\n      if (savedEntry.index === entry.index) {\n        return entry\n      }\n      return savedEntry\n    })\n    this.setState({\n      entries: newEntries\n    }, () => {\n      this.setEntries(newEntries)\n      callback()\n    })\n  }\n\n  updateEntry = (entry) => {\n    const {\n      entries\n    } = this.state\n    const newEntries = entries.map((savedEntry) => {\n      if (savedEntry.index === entry.index) {\n        return {\n          ...savedEntry,\n          ...entry,\n        }\n      }\n      return savedEntry\n    })\n    this.setState({\n      entries: newEntries\n    }, () => {\n      this.setEntries(newEntries)\n    })\n  }\n\n  addByCharacterFilter = entry => {\n    log('addByCharacterFilter', entry)\n    this.setState((prevState) => ({\n      filters: {\n        byCharacter: [\n          ...prevState.filters.byCharacter,\n          entry.index,\n        ],\n      }\n    }))\n  }\n\n  removeByCharacterFilter = entry => {\n    log('removeByCharacterFilter', entry)\n    this.setState((prevState) => ({\n      filters: {\n        byCharacter: prevState.filters.byCharacter.filter(index =>\n          !(index === entry.index)\n        ),\n      }\n    }))\n  }\n\n  filterEntries = () => {\n    const {\n      entries,\n      filters: {\n        byCharacter,\n      },\n    } = this.state\n\n    const hasCharacterFilter = byCharacter.length > 0\n    if (hasCharacterFilter) {\n      return entries.filter(entry => byCharacter.includes(entry.index))\n    }\n\n    return entries\n  }\n\n  handleEventClick = (event) => {\n    console.log(event)\n  }\n\n  handleLevelClick = ({\n    entryId,\n    fieldName,\n    fieldValue,\n  }) => {\n    const sbCalculator = new SummonBoardLevel(fieldName, fieldValue)\n    let newFieldValue = 0\n    if (!sbCalculator.isTreasured()) {\n      newFieldValue = sbCalculator.calculatedTreasureLevel()\n    }\n    if (sbCalculator.isTreasured() && !sbCalculator.isMastered()) {\n      newFieldValue = sbCalculator.calculatedMasterLevel()\n    }\n    if (sbCalculator.isMastered()) {\n      newFieldValue = 0\n    }\n    this.updateEntry({\n      index: entryId,\n      [fieldName]: newFieldValue,\n    })\n  }\n\n  render = () => {\n    const {\n      entries,\n    } = this.state\n\n    const summonBoardColumns = summonBoards.map((summonName) =>\n      ({\n        title: `${summonName}`,\n        field: `${summonName.toLowerCase()}_sb_level`,\n        type: 'numeric',\n        cellStyle: { color: '#ffffff', fontSize: 16 },\n      })\n    )\n    log('render', this.state)\n\n    const events = dffoodb.calculateEventsInPercentage(\n      dffoodb.organizeEventsInLanes(\n        dffoodb.getEvents()\n      )\n    )\n\n    return (\n      <>\n        <Card>\n          <CardContent>\n            <Typography variant=\"h5\" component=\"h1\">\n              Events history\n            </Typography>\n            <Box style={{ padding: 10 }}>\n              <EventsTimeline\n                lanes={events.data}\n                limits={events.limits}\n                onClickEvent={this.handleEventClick}\n              />\n            </Box>\n          </CardContent>\n        </Card>\n        <Box display=\"flex\" flexDirection=\"row\">\n          <Box flex={1} display=\"flex\">\n            <Box flexGrow={0} display=\"flex\" flexDirection=\"column\">\n              <Card>\n                <CardContent>\n                  <Typography variant=\"h5\" component=\"h1\">\n                    Character Name\n                  </Typography>\n                  <FormGroup row style={{ maxHeight: 400, overflow: 'scroll' }}>\n                    {\n                      sortBy(prop('character_name'))(entries).map(entry => (\n                        <FormControlLabel\n                          style={{ maxWidth: '100%', minWidth: '24%' }}\n                          key={entry.character_name}\n                          control={\n                            <Checkbox\n                              value={entry.index}\n                              color=\"primary\"\n                              onChange={(event, checked) => {\n                                console.log(event, checked)\n                                if (checked) {\n                                  this.addByCharacterFilter(entry)\n                                } else {\n                                  this.removeByCharacterFilter(entry)\n                                }\n                              }}\n                            />\n                          }\n                          label={entry.character_name}\n                        />\n                      ))\n                    }\n                  </FormGroup>\n                </CardContent>\n              </Card>\n            </Box>\n          </Box>\n\n          <Box flex={1} display=\"flex\">\n            <MaterialTable\n              icons={tableIcons}\n              actions={[\n                {\n                  icon: MonetizationOn,\n                  tooltip: 'Treasures',\n                  onClick: (event, rowData) => {\n                    this.addEntryToStorage({\n                      index: rowData.index,\n                      character_name: rowData.character_name,\n                      ifrit_sb_level: 20,\n                      shiva_sb_level: 21,\n                      ramuh_sb_level: 21,\n                    }, () => null)\n                  },\n                },\n                {\n                  icon: EmojiEvents,\n                  tooltip: 'Mastered',\n                  onClick: (event, rowData) => {\n                    this.addEntryToStorage({\n                      index: rowData.index,\n                      character_name: rowData.character_name,\n                      ifrit_sb_level: 56,\n                      shiva_sb_level: 56,\n                      ramuh_sb_level: 56,\n                    }, () => null)\n                  },\n                },\n              ]}\n              editable={{\n                onRowUpdate: newData =>\n                  new Promise((resolve, reject) => {\n                    this.addEntryToStorage(newData, resolve)\n                  })\n              }}\n              columns={[\n                { title: \"Character\", field: \"character_name\", editable: 'never', cellStyle: { color: '#ffffff', fontSize: 16 } },\n                ...summonBoardColumns,\n              ]}\n              components={{\n                Cell: (props) => {\n                  const {\n                    rowData: {\n                      index,\n                    },\n                    columnDef: {\n                      field,\n                    },\n                    value,\n                  } = props\n                  const cellValue = props.rowData[props.columnDef.field]\n                  const sbCalculator = new SummonBoardLevel(props.columnDef.field, cellValue)\n                  let boardStatusColor = {}\n                  if (sbCalculator.isTreasured()) {\n                    boardStatusColor = { backgroundColor: 'lightblue' }\n                  }\n                  if (sbCalculator.isMastered()) {\n                    boardStatusColor = { backgroundColor: '#ffcc00' }\n                  }\n                  return (\n                    <td\n                      style={{\n                        ...props.columnDef.cellStyle,\n                        border: '1px solid white',\n                        ...boardStatusColor,\n                      }}\n                    >\n                      <Box display=\"flex\" style={{\n                        justifyContent: 'center',\n                        alignItems: 'center',\n                      }}>\n                        {\n                          props.columnDef.editable === 'never'\n                            ? cellValue\n                            : (\n                              <Button\n                                onClick={() => this.handleLevelClick({\n                                  entryId: index,\n                                  fieldName: field,\n                                  fieldValue: value,\n                                })}\n                                variant=\"outlined\"\n                                style={{\n                                  backgroundColor: 'white',\n                                }}\n                              >\n                                { cellValue }\n                              </Button>\n                            )\n                        }\n                      </Box>\n                    </td>\n                  )\n                },\n              }}\n              data={this.filterEntries()}\n              title=\"Summon Boards\"\n              options={{\n                paging: true,\n                pageSize: 20,\n                paginationType: 'stepped',\n                headerStyle: {\n                  backgroundColor: '#044343',\n                  color: '#FFF',\n                  fontWeight: 'bold',\n                  fontSize: 20,\n                  border: '1px solid white',\n                },\n                actionsCellStyle: {\n                  color: 'white',\n                },\n                rowStyle: {\n                  backgroundColor: '#045757',\n                  color: '#fff',\n                },\n              }}\n            />\n          </Box>\n        </Box>\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'typeface-roboto'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}